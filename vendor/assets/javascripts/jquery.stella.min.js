// /*! Stellar.js v0.4.0 | Copyright 2012, Mark Dalgleish | http://markdalgleish.com/projects/stellar.js | http://markdalgleish.mit-license.org */
// (function(e,t,n,r){function d(t,n){this.element=t,this.options=e.extend({},s,n),this._defaults=s,this._name=i,this.init()}var i="stellar",s={scrollProperty:"scroll",positionProperty:"position",horizontalScrolling:!0,verticalScrolling:!0,horizontalOffset:0,verticalOffset:0,parallaxBackgrounds:!0,parallaxElements:!0,hideDistantElements:!0,viewportDetectionInterval:1e4,hideElement:function(e){e.hide()},showElement:function(e){e.show()}},o={scroll:{getTop:function(e){return e.scrollTop()},setTop:function(e,t){e.scrollTop(t)},getLeft:function(e){return e.scrollLeft()},setLeft:function(e,t){e.scrollLeft(t)}},position:{getTop:function(e){return parseInt(e.css("top"),10)*-1},setTop:function(e,t){e.css("top",t)},getLeft:function(e){return parseInt(e.css("left"),10)*-1},setLeft:function(e,t){e.css("left",t)}},margin:{getTop:function(e){return parseInt(e.css("margin-top"),10)*-1},setTop:function(e,t){e.css("margin-top",t)},getLeft:function(e){return parseInt(e.css("margin-left"),10)*-1},setLeft:function(e,t){e.css("margin-left",t)}},transform:{getTop:function(e){return e.css(a+"transform")!=="none"?parseInt(e.css(a+"transform").match(/(-?[0-9]+)/g)[5],10)*-1:0},setTop:function(e,t){h(e,t,"Y")},getLeft:function(e){return e.css(a+"transform")!=="none"?parseInt(e.css(a+"transform").match(/(-?[0-9]+)/g)[4],10)*-1:0},setLeft:function(e,t){h(e,t,"X")}}},u={position:{setTop:function(e,t){e.css("top",t)},setLeft:function(e,t){e.css("left",t)}},transform:{setTop:function(e,t,n){h(e,t-n,"Y")},setLeft:function(e,t,n){h(e,t-n,"X")}}},a=function(){var t="";return e.browser.webkit?t="-webkit-":e.browser.mozilla?t="-moz-":e.browser.opera?t="-o-":e.browser.msie&&(t="-ms-"),t}(),f=n.createElement("div").style.backgroundPositionX!==r,l=function(){return f?function(e,t,n){e.css({"background-position-x":t,"background-position-y":n})}:function(e,t,n){e.css("background-position",t+" "+n)}}(),c=function(){return f?function(e){return[e[0].style.backgroundPositionX,e[0].style.backgroundPositionY]}:function(e){return e.css("background-position").split(" ")}}(),h=function(e,t,n){var r=e.css(a+"transform");r==="none"?e.css(a+"transform","translate"+n+"("+t+"px)"):e.css(a+"transform",p(r,/(-?[0-9]+[.]?[0-9]*)/g,n==="X"?5:6,t))},p=function(e,t,n,i){var s,o,u;return e.search(t)===-1?e:(s=e.split(t),u=n*2-1,s[u]===r?e:(s[u]=i,s.join("")))};d.prototype={init:function(){this.options.name=i+"_"+Math.floor(Math.random()*1e4),this._defineElements(),this._defineGetters(),this._defineSetters(),this.refresh(),this._startViewportDetectionLoop(),this._startAnimationLoop()},_defineElements:function(){this.element===n.body&&(this.element=t),this.$scrollElement=e(this.element),this.$element=this.element===t?e("body"):this.$scrollElement,this.$viewportElement=this.options.viewportElement!==r?e(this.options.viewportElement):this.$scrollElement[0]===t||this.options.scrollProperty.indexOf("scroll")===0?this.$scrollElement:this.$scrollElement.parent()},_defineGetters:function(){var e=this;this._getScrollLeft=function(){return o[e.options.scrollProperty].getLeft(e.$scrollElement)},this._getScrollTop=function(){return o[e.options.scrollProperty].getTop(e.$scrollElement)}},_defineSetters:function(){var e=this;this._setScrollLeft=function(t){o[e.options.scrollProperty].setLeft(e.$scrollElement,t)},this._setScrollTop=function(t){o[e.options.scrollProperty].setTop(e.$scrollElement,t)},this._setLeft=function(t,n,r){u[e.options.positionProperty].setLeft(t,n,r)},this._setTop=function(t,n,r){u[e.options.positionProperty].setTop(t,n,r)}},refresh:function(){var n=this,r=n._getScrollLeft(),i=n._getScrollTop();this._setScrollLeft(0),this._setScrollTop(0),this._setOffsets(),this._findParticles(),this._findBackgrounds(),navigator.userAgent.indexOf("WebKit")>0&&e(t).load(function(){var e=n._getScrollLeft(),t=n._getScrollTop();n._setScrollLeft(e+1),n._setScrollTop(t+1),n._setScrollLeft(e),n._setScrollTop(t)}),n._setScrollLeft(r),n._setScrollTop(i)},_findParticles:function(){var t=this,n=this._getScrollLeft(),i=this._getScrollTop();if(this.particles!==r)for(var s=this.particles.length-1;s>=0;s--)this.particles[s].$element.data("stellar-elementIsActive",r);this.particles=[];if(!this.options.parallaxElements)return;this.$element.find("[data-stellar-ratio]").each(function(n){var i=e(this),s,o,u,a,f,l,c,h,p,d=0,v=0,m=0,g=0;if(!i.data("stellar-elementIsActive"))i.data("stellar-elementIsActive",this);else if(i.data("stellar-elementIsActive")!==this)return;t.options.showElement(i),i.data("stellar-startingLeft")?(i.css("left",i.data("stellar-startingLeft")),i.css("top",i.data("stellar-startingTop"))):(i.data("stellar-startingLeft",i.css("left")),i.data("stellar-startingTop",i.css("top"))),u=i.position().left,a=i.position().top,f=i.css("margin-left")==="auto"?0:parseInt(i.css("margin-left"),10),l=i.css("margin-top")==="auto"?0:parseInt(i.css("margin-top"),10),h=i.offset().left-f,p=i.offset().top-l,i.parents().each(function(){var t=e(this);if(t.data("stellar-offset-parent")===!0)return d=m,v=g,c=t,!1;m+=t.position().left,g+=t.position().top}),s=i.data("stellar-horizontal-offset")!==r?i.data("stellar-horizontal-offset"):c!==r&&c.data("stellar-horizontal-offset")!==r?c.data("stellar-horizontal-offset"):t.horizontalOffset,o=i.data("stellar-vertical-offset")!==r?i.data("stellar-vertical-offset"):c!==r&&c.data("stellar-vertical-offset")!==r?c.data("stellar-vertical-offset"):t.verticalOffset,t.particles.push({$element:i,$offsetParent:c,isFixed:i.css("position")==="fixed",horizontalOffset:s,verticalOffset:o,startingPositionLeft:u,startingPositionTop:a,startingOffsetLeft:h,startingOffsetTop:p,parentOffsetLeft:d,parentOffsetTop:v,stellarRatio:i.data("stellar-ratio")!==r?i.data("stellar-ratio"):1,width:i.outerWidth(!0),height:i.outerHeight(!0),isHidden:!1})})},_findBackgrounds:function(){var t=this,n=this._getScrollLeft(),i=this._getScrollTop(),s;this.backgrounds=[];if(!this.options.parallaxBackgrounds)return;s=this.$element.find("[data-stellar-background-ratio]"),this.$element.is("[data-stellar-background-ratio]")&&s.add(this.$element),s.each(function(){var s=e(this),o=c(s),u,a,f,h,p,d,v,m,g,y=0,b=0,w=0,E=0;if(!s.data("stellar-backgroundIsActive"))s.data("stellar-backgroundIsActive",this);else if(s.data("stellar-backgroundIsActive")!==this)return;s.data("stellar-backgroundStartingLeft")?l(s,s.data("stellar-backgroundStartingLeft"),s.data("stellar-backgroundStartingTop")):(s.data("stellar-backgroundStartingLeft",o[0]),s.data("stellar-backgroundStartingTop",o[1])),p=s.css("margin-left")==="auto"?0:parseInt(s.css("margin-left"),10),d=s.css("margin-top")==="auto"?0:parseInt(s.css("margin-top"),10),v=s.offset().left-p-n,m=s.offset().top-d-i,s.parents().each(function(){var t=e(this);if(t.data("stellar-offset-parent")===!0)return y=w,b=E,g=t,!1;w+=t.position().left,E+=t.position().top}),u=s.data("stellar-horizontal-offset")!==r?s.data("stellar-horizontal-offset"):g!==r&&g.data("stellar-horizontal-offset")!==r?g.data("stellar-horizontal-offset"):t.horizontalOffset,a=s.data("stellar-vertical-offset")!==r?s.data("stellar-vertical-offset"):g!==r&&g.data("stellar-vertical-offset")!==r?g.data("stellar-vertical-offset"):t.verticalOffset,t.backgrounds.push({$element:s,$offsetParent:g,isFixed:s.css("background-attachment")==="fixed",horizontalOffset:u,verticalOffset:a,startingValueLeft:o[0],startingValueTop:o[1],startingBackgroundPositionLeft:isNaN(parseInt(o[0],10))?0:parseInt(o[0],10),startingBackgroundPositionTop:isNaN(parseInt(o[1],10))?0:parseInt(o[1],10),startingPositionLeft:s.position().left,startingPositionTop:s.position().top,startingOffsetLeft:v,startingOffsetTop:m,parentOffsetLeft:y,parentOffsetTop:b,stellarRatio:s.data("stellar-background-ratio")===r?1:s.data("stellar-background-ratio")})})},destroy:function(){var t,n,r,i,s;for(s=this.particles.length-1;s>=0;s--)t=this.particles[s],n=t.$element.data("stellar-startingLeft"),r=t.$element.data("stellar-startingTop"),this._setLeft(t.$element,n,n),this._setTop(t.$element,r,r),this.options.showElement(t.$element),t.$element.data("stellar-startingLeft",null).data("stellar-elementIsActive",null).data("stellar-backgroundIsActive",null);for(s=this.backgrounds.length-1;s>=0;s--)i=this.backgrounds[s],l(i.$element,i.startingValueLeft,i.startingValueTop);this._animationLoop=e.noop,clearInterval(this._viewportDetectionInterval)},_setOffsets:function(){var n=this;e(t).unbind("resize.horizontal-"+this.name).unbind("resize.vertical-"+this.name),typeof this.options.horizontalOffset=="function"?(this.horizontalOffset=this.options.horizontalOffset(),e(t).bind("resize.horizontal-"+this.name,function(){n.horizontalOffset=n.options.horizontalOffset()})):this.horizontalOffset=this.options.horizontalOffset,typeof this.options.verticalOffset=="function"?(this.verticalOffset=this.options.verticalOffset(),e(t).bind("resize.vertical-"+this.name,function(){n.verticalOffset=n.options.verticalOffset()})):this.verticalOffset=this.options.verticalOffset},_repositionElements:function(){var e=this._getScrollLeft(),t=this._getScrollTop(),n,r,i,s,o,u,a,f=!0,c=!0,h,p,d,v,m;if(this.currentScrollLeft===e&&this.currentScrollTop===t&&this.currentWidth===this.viewportWidth&&this.currentHeight===this.viewportHeight)return;this.currentScrollLeft=e,this.currentScrollTop=t,this.currentWidth=this.viewportWidth,this.currentHeight=this.viewportHeight;for(m=this.particles.length-1;m>=0;m--)i=this.particles[m],s=i.isFixed?1:0,this.options.horizontalScrolling&&(h=(e+i.horizontalOffset+this.viewportOffsetLeft+i.startingPositionLeft-i.startingOffsetLeft+i.parentOffsetLeft)*-(i.stellarRatio+s-1)+i.startingPositionLeft,d=h-i.startingPositionLeft+i.startingOffsetLeft),this.options.verticalScrolling&&(p=(t+i.verticalOffset+this.viewportOffsetTop+i.startingPositionTop-i.startingOffsetTop+i.parentOffsetTop)*-(i.stellarRatio+s-1)+i.startingPositionTop,v=p-i.startingPositionTop+i.startingOffsetTop),this.options.hideDistantElements&&(c=!this.options.horizontalScrolling||d+i.width>(i.isFixed?0:e)&&d<(i.isFixed?0:e)+this.viewportWidth+this.viewportOffsetLeft,f=!this.options.verticalScrolling||v+i.height>(i.isFixed?0:t)&&v<(i.isFixed?0:t)+this.viewportHeight+this.viewportOffsetTop),c&&f?(i.isHidden&&(this.options.showElement(i.$element),i.isHidden=!1),this.options.horizontalScrolling&&this._setLeft(i.$element,h,i.startingPositionLeft),this.options.verticalScrolling&&this._setTop(i.$element,p,i.startingPositionTop)):i.isHidden||(this.options.hideElement(i.$element),i.isHidden=!0);for(m=this.backgrounds.length-1;m>=0;m--)o=this.backgrounds[m],s=o.isFixed?0:1,u=this.options.horizontalScrolling?(e+o.horizontalOffset-this.viewportOffsetLeft-o.startingOffsetLeft+o.parentOffsetLeft-o.startingBackgroundPositionLeft)*(s-o.stellarRatio)+"px":o.startingValueLeft,a=this.options.verticalScrolling?(t+o.verticalOffset-this.viewportOffsetTop-o.startingOffsetTop+o.parentOffsetTop-o.startingBackgroundPositionTop)*(s-o.stellarRatio)+"px":o.startingValueTop,l(o.$element,u,a)},_startViewportDetectionLoop:function(){var e=this,t=function(){var t=e.$viewportElement.offset(),n=t!==null&&t!==r;e.viewportWidth=e.$viewportElement.width(),e.viewportHeight=e.$viewportElement.height(),e.viewportOffsetTop=n?t.top:0,e.viewportOffsetLeft=n?t.left:0};t(),this._viewportDetectionInterval=setInterval(t,this.options.viewportDetectionInterval)},_startAnimationLoop:function(){var e=this,n=function(){return t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame||t.oRequestAnimationFrame||t.msRequestAnimationFrame||function(e,n){t.setTimeout(e,1e3/60)}}();this._animationLoop=function(){n(e._animationLoop),e._repositionElements()},this._animationLoop()}},e.fn[i]=function(t){var n=arguments;if(t===r||typeof t=="object")return this.each(function(){e.data(this,"plugin_"+i)||e.data(this,"plugin_"+i,new d(this,t))});if(typeof t=="string"&&t[0]!=="_"&&t!=="init")return this.each(function(){var r=e.data(this,"plugin_"+i);r instanceof d&&typeof r[t]=="function"&&r[t].apply(r,Array.prototype.slice.call(n,1)),t==="destroy"&&e.data(this,"plugin_"+i,null)})},e[i]=function(n){var r=e(t);return r.stellar.apply(r,Array.prototype.slice.call(arguments,0))},e[i].scrollProperty=o,e[i].positionProperty=u,t.Stellar=d})(jQuery,window,document);

/*!
 * Stellar.js v0.4.0
 * http://markdalgleish.com/projects/stellar.js
 *
 * Copyright 2012, Mark Dalgleish
 * This content is released under the MIT license
 * http://markdalgleish.mit-license.org
 */

;(function($, window, document, undefined){

 var pluginName = 'stellar',
  defaults = {
   scrollProperty: 'scroll',
   positionProperty: 'position',
   horizontalScrolling: true,
   verticalScrolling: true,
   horizontalOffset: 0,
   verticalOffset: 0,
   parallaxBackgrounds: true,
   parallaxElements: true,
   hideDistantElements: true,
   viewportDetectionInterval: 10000,
   hideElement: function($elem) { $elem.hide(); },
   showElement: function($elem) { $elem.show(); }
  },

  scrollProperty = {
   scroll: {
    getTop: function($elem) { return $elem.scrollTop(); },
    setTop: function($elem, val) { $elem.scrollTop(val); },

    getLeft: function($elem) { return $elem.scrollLeft(); },
    setLeft: function($elem, val) { $elem.scrollLeft(val); }
   },
   position: {
    getTop: function($elem) { return parseInt($elem.css('top'), 10) * -1; },
    setTop: function($elem, val) { $elem.css('top', val); },

    getLeft: function($elem) { return parseInt($elem.css('left'), 10) * -1; },
    setLeft: function($elem, val) { $elem.css('left', val); }
   },
   margin: {
    getTop: function($elem) { return parseInt($elem.css('margin-top'), 10) * -1; },
    setTop: function($elem, val) { $elem.css('margin-top', val); },

    getLeft: function($elem) { return parseInt($elem.css('margin-left'), 10) * -1; },
    setLeft: function($elem, val) { $elem.css('margin-left', val); }
   },
   transform: {
    getTop: function($elem) { return ($elem.css(vendorPrefix + 'transform') !== 'none' ? parseInt($elem.css(vendorPrefix + 'transform').match(/(-?[0-9]+)/g)[5], 10) * -1 : 0); },
    setTop: function($elem, val) { setTransform($elem, val, 'Y'); },

    getLeft: function($elem) { return ($elem.css(vendorPrefix + 'transform') !== 'none' ? parseInt($elem.css(vendorPrefix + 'transform').match(/(-?[0-9]+)/g)[4], 10) * -1 : 0); },
    setLeft: function($elem, val) { setTransform($elem, val, 'X'); }
   }
  },

  positionProperty = {
   position: {
    setTop: function($elem, top) { $elem.css('top', top); },
    setLeft: function($elem, left) { $elem.css('left', left); }
   },
   transform: {
    setTop: function($elem, top, startingTop) { setTransform($elem, top - startingTop, 'Y'); },
    setLeft: function($elem, left, startingLeft) { setTransform($elem, left - startingLeft, 'X'); }
   }
  },

  vendorPrefix = (function() {
   var prefix = '';

   if ($.browser.webkit) {
    prefix = '-webkit-';
   } else if ($.browser.mozilla) {
    prefix = '-moz-';
   } else if ($.browser.opera) {
    prefix = '-o-';
   } else if ($.browser.msie) {
    prefix = '-ms-';
   }

   return prefix;
  }()),

  supportsBackgroundPositionXY = document.createElement('div').style.backgroundPositionX !== undefined,

  setBackgroundPosition = (function() {
   return supportsBackgroundPositionXY ?
    function($elem, x, y) {
     $elem.css({
      'background-position-x': x,
      'background-position-y': y
     });
    } :
    function($elem, x, y) {
     $elem.css('background-position', x + ' ' + y);
    };
  }()),

  getBackgroundPosition = (function() {
   return supportsBackgroundPositionXY ?
    function($elem) {
     return [
      $elem[0].style.backgroundPositionX,
      $elem[0].style.backgroundPositionY
     ];
    } :
    function($elem) {
     return $elem.css('background-position').split(' ');
    };
  }()),

  setTransform = function($elem, val, dimension /* 'X' or 'Y' */) {
   var currentTransform = $elem.css(vendorPrefix + 'transform');

   if (currentTransform === 'none') {
    $elem.css(vendorPrefix + 'transform', 'translate' + dimension + '(' + val + 'px)');
   } else {
    $elem.css(vendorPrefix + 'transform', replaceNthOccurence(currentTransform, /(-?[0-9]+[.]?[0-9]*)/g, (dimension === 'X' ? 5 : 6), val));
   }
  },

  replaceNthOccurence = function(original, pattern, n, replace) {
   var parts,
    tempParts,
    indexOfNthMatch;

   if (original.search(pattern) === -1) {
    return original;
   }

   parts = original.split(pattern);

   indexOfNthMatch = n * 2 - 1;

   if (parts[indexOfNthMatch] === undefined) {
    return original;
   }

   parts[indexOfNthMatch] = replace;

   return parts.join('');
  };

 function Plugin(element, options) {
  this.element = element;
  this.options = $.extend({}, defaults, options);

  this._defaults = defaults;
  this._name = pluginName;

  this.init();
 }

 Plugin.prototype = {
  init: function() {
   this.options.name = pluginName + '_' + Math.floor(Math.random()*10000);

   this._defineElements();
   this._defineGetters();
   this._defineSetters();

   this.refresh();

   this._startViewportDetectionLoop();
   this._startAnimationLoop();
  },
  _defineElements: function() {
   if (this.element === document.body) this.element = window;
   this.$scrollElement = $(this.element);
   this.$element = this.element === window ? $('body') : this.$scrollElement;
   this.$viewportElement = (this.options.viewportElement !== undefined ? $(this.options.viewportElement) : (this.$scrollElement[0] === window || this.options.scrollProperty.indexOf('scroll') === 0 ? this.$scrollElement : this.$scrollElement.parent()) );
  },
  _defineGetters: function() {
   var self = this;

   this._getScrollLeft = function() {
    return scrollProperty[self.options.scrollProperty].getLeft(self.$scrollElement);
   };

   this._getScrollTop = function() {
    return scrollProperty[self.options.scrollProperty].getTop(self.$scrollElement);
   };
  },
  _defineSetters: function() {
   var self = this;

   this._setScrollLeft = function(val) {
    scrollProperty[self.options.scrollProperty].setLeft(self.$scrollElement, val);
   };

   this._setScrollTop = function(val) {
    scrollProperty[self.options.scrollProperty].setTop(self.$scrollElement, val);
   };

   this._setLeft = function($elem, left, startingLeft) {
    positionProperty[self.options.positionProperty].setLeft($elem, left, startingLeft);
   };

   this._setTop = function($elem, top, startingTop) {
    positionProperty[self.options.positionProperty].setTop($elem, top, startingTop);
   };
  },
  refresh: function() {
   var self = this,
    oldLeft = self._getScrollLeft(),
    oldTop = self._getScrollTop();

   this._setScrollLeft(0);
   this._setScrollTop(0);

   this._setOffsets();
   this._findParticles();
   this._findBackgrounds();

   // Fix for WebKit background rendering bug
   if (navigator.userAgent.indexOf('WebKit') > 0) {
    $(window).load(function(){
     var oldLeft = self._getScrollLeft(),
      oldTop = self._getScrollTop();

     self._setScrollLeft(oldLeft + 1);
     self._setScrollTop(oldTop + 1);

     self._setScrollLeft(oldLeft);
     self._setScrollTop(oldTop);
    });
   }

   self._setScrollLeft(oldLeft);
   self._setScrollTop(oldTop);
  },
  _findParticles: function(){
   var self = this,
    scrollLeft = this._getScrollLeft(),
    scrollTop = this._getScrollTop();

   if (this.particles !== undefined) {
    for (var i = this.particles.length - 1; i >= 0; i--) {
     this.particles[i].$element.data('stellar-elementIsActive', undefined);
    }
   }

   this.particles = [];

   if (!this.options.parallaxElements) return;

   this.$element.find('[data-stellar-ratio]').each(function(i){
    var $this = $(this),
     horizontalOffset,
     verticalOffset,
     positionLeft,
     positionTop,
     marginLeft,
     marginTop,
     $offsetParent,
     offsetLeft,
     offsetTop,
     parentOffsetLeft = 0,
     parentOffsetTop = 0,
     tempParentOffsetLeft = 0,
     tempParentOffsetTop = 0;

    // Ensure this element isn't already part of another scrolling element
    if (!$this.data('stellar-elementIsActive')) {
     $this.data('stellar-elementIsActive', this);
    } else if ($this.data('stellar-elementIsActive') !== this) {
     return;
    }

    self.options.showElement($this);

    // Save/restore the original top and left CSS values in case we refresh the particles or destroy the instance
    if (!$this.data('stellar-startingLeft')) {
     $this.data('stellar-startingLeft', $this.css('left'));
     $this.data('stellar-startingTop', $this.css('top'));
    } else {
     $this.css('left', $this.data('stellar-startingLeft'));
     $this.css('top', $this.data('stellar-startingTop'));
    }

    positionLeft = $this.position().left;
    positionTop = $this.position().top;

    // Catch-all for margin top/left properties (these evaluate to 'auto' in IE7 and IE8)
    marginLeft = ($this.css('margin-left') === 'auto') ? 0 : parseInt($this.css('margin-left'), 10);
    marginTop = ($this.css('margin-top') === 'auto') ? 0 : parseInt($this.css('margin-top'), 10);

    offsetLeft = $this.offset().left - marginLeft;
    offsetTop = $this.offset().top - marginTop;

    // Calculate the offset parent
    $this.parents().each(function(){
     var $this = $(this);

     if ($this.data('stellar-offset-parent') === true) {
      parentOffsetLeft = tempParentOffsetLeft;
      parentOffsetTop = tempParentOffsetTop;
      $offsetParent = $this;

      return false;
     } else {
      tempParentOffsetLeft += $this.position().left;
      tempParentOffsetTop += $this.position().top;
     }
    });

    // Detect the offsets
    horizontalOffset = ($this.data('stellar-horizontal-offset') !== undefined ? $this.data('stellar-horizontal-offset') : ($offsetParent !== undefined && $offsetParent.data('stellar-horizontal-offset') !== undefined ? $offsetParent.data('stellar-horizontal-offset') : self.horizontalOffset));
    verticalOffset = ($this.data('stellar-vertical-offset') !== undefined ? $this.data('stellar-vertical-offset') : ($offsetParent !== undefined && $offsetParent.data('stellar-vertical-offset') !== undefined ? $offsetParent.data('stellar-vertical-offset') : self.verticalOffset));

    //Add our object to the particles collection
    self.particles.push({
     $element: $this,
     $offsetParent: $offsetParent,
     isFixed: $this.css('position') === 'fixed',
     horizontalOffset: horizontalOffset,
     verticalOffset: verticalOffset,
     startingPositionLeft: positionLeft,
     startingPositionTop: positionTop,
     startingOffsetLeft: offsetLeft,
     startingOffsetTop: offsetTop,
     parentOffsetLeft: parentOffsetLeft,
     parentOffsetTop: parentOffsetTop,
     stellarRatio: $this.data('stellar-ratio') !== undefined ? $this.data('stellar-ratio') : 1,
     width: $this.outerWidth(true),
     height: $this.outerHeight(true),
     isHidden: false
    });
   });
  },
  _findBackgrounds: function() {
   var self = this,
    scrollLeft = this._getScrollLeft(),
    scrollTop = this._getScrollTop(),
    $backgroundElements;

   this.backgrounds = [];

   if (!this.options.parallaxBackgrounds) return;

   $backgroundElements = this.$element.find('[data-stellar-background-ratio]');

   if (this.$element.is('[data-stellar-background-ratio]')) {
    $backgroundElements.add(this.$element);
   }

   $backgroundElements.each(function(){
    var $this = $(this),
     backgroundPosition = getBackgroundPosition($this),
     horizontalOffset,
     verticalOffset,
     positionLeft,
     positionTop,
     marginLeft,
     marginTop,
     offsetLeft,
     offsetTop,
     $offsetParent,
     parentOffsetLeft = 0,
     parentOffsetTop = 0,
     tempParentOffsetLeft = 0,
     tempParentOffsetTop = 0;

    // Ensure this element isn't already part of another scrolling element
    if (!$this.data('stellar-backgroundIsActive')) {
     $this.data('stellar-backgroundIsActive', this);
    } else if ($this.data('stellar-backgroundIsActive') !== this) {
     return;
    }

    // Save/restore the original top and left CSS values in case we destroy the instance
    if (!$this.data('stellar-backgroundStartingLeft')) {
     $this.data('stellar-backgroundStartingLeft', backgroundPosition[0]);
     $this.data('stellar-backgroundStartingTop', backgroundPosition[1]);
    } else {
     setBackgroundPosition($this, $this.data('stellar-backgroundStartingLeft'), $this.data('stellar-backgroundStartingTop'));
    }

    // Catch-all for margin top/left properties (these evaluate to 'auto' in IE7 and IE8)
    marginLeft = ($this.css('margin-left') === 'auto') ? 0 : parseInt($this.css('margin-left'), 10);
    marginTop = ($this.css('margin-top') === 'auto') ? 0 : parseInt($this.css('margin-top'), 10);

    offsetLeft = $this.offset().left - marginLeft - scrollLeft;
    offsetTop = $this.offset().top - marginTop - scrollTop;

    // Calculate the offset parent
    $this.parents().each(function(){
     var $this = $(this);

     if ($this.data('stellar-offset-parent') === true) {
      parentOffsetLeft = tempParentOffsetLeft;
      parentOffsetTop = tempParentOffsetTop;
      $offsetParent = $this;

      return false;
     } else {
      tempParentOffsetLeft += $this.position().left;
      tempParentOffsetTop += $this.position().top;
     }
    });

    // Detect the offsets
    horizontalOffset = ($this.data('stellar-horizontal-offset') !== undefined ? $this.data('stellar-horizontal-offset') : ($offsetParent !== undefined && $offsetParent.data('stellar-horizontal-offset') !== undefined ? $offsetParent.data('stellar-horizontal-offset') : self.horizontalOffset));
    verticalOffset = ($this.data('stellar-vertical-offset') !== undefined ? $this.data('stellar-vertical-offset') : ($offsetParent !== undefined && $offsetParent.data('stellar-vertical-offset') !== undefined ? $offsetParent.data('stellar-vertical-offset') : self.verticalOffset));

    self.backgrounds.push({
     $element: $this,
     $offsetParent: $offsetParent,
     isFixed: $this.css('background-attachment') === 'fixed',
     horizontalOffset: horizontalOffset,
     verticalOffset: verticalOffset,
     startingValueLeft: backgroundPosition[0],
     startingValueTop: backgroundPosition[1],
     startingBackgroundPositionLeft: isNaN(parseInt(backgroundPosition[0], 10)) ? 0 : parseInt(backgroundPosition[0], 10),
     startingBackgroundPositionTop: isNaN(parseInt(backgroundPosition[1], 10)) ? 0 : parseInt(backgroundPosition[1], 10),
     startingPositionLeft: $this.position().left,
     startingPositionTop: $this.position().top,
     startingOffsetLeft: offsetLeft,
     startingOffsetTop: offsetTop,
     parentOffsetLeft: parentOffsetLeft,
     parentOffsetTop: parentOffsetTop,
     stellarRatio: $this.data('stellar-background-ratio') === undefined ? 1 : $this.data('stellar-background-ratio')
    });
   });
  },
  destroy: function() {
   var particle,
    startingPositionLeft,
    startingPositionTop,
    background,
    i;

   for (i = this.particles.length - 1; i >= 0; i--) {
    particle = this.particles[i];
    startingPositionLeft = particle.$element.data('stellar-startingLeft');
    startingPositionTop = particle.$element.data('stellar-startingTop');

    this._setLeft(particle.$element, startingPositionLeft, startingPositionLeft);
    this._setTop(particle.$element, startingPositionTop, startingPositionTop);

    this.options.showElement(particle.$element);

    particle.$element.data('stellar-startingLeft', null).data('stellar-elementIsActive', null).data('stellar-backgroundIsActive', null);
   }

   for (i = this.backgrounds.length - 1; i >= 0; i--) {
    background = this.backgrounds[i];
    setBackgroundPosition(background.$element, background.startingValueLeft, background.startingValueTop);
   }

   this._animationLoop = $.noop;
   clearInterval(this._viewportDetectionInterval);
  },
  _setOffsets: function() {
   var self = this;

   $(window).unbind('resize.horizontal-' + this.name).unbind('resize.vertical-' + this.name);

   if (typeof this.options.horizontalOffset === 'function') {
    this.horizontalOffset = this.options.horizontalOffset();
    $(window).bind('resize.horizontal-' + this.name, function() {
     self.horizontalOffset = self.options.horizontalOffset();
    });
   } else {
    this.horizontalOffset = this.options.horizontalOffset;
   }

   if (typeof this.options.verticalOffset === 'function') {
    this.verticalOffset = this.options.verticalOffset();
    $(window).bind('resize.vertical-' + this.name, function() {
     self.verticalOffset = self.options.verticalOffset();
    });
   } else {
    this.verticalOffset = this.options.verticalOffset;
   }
  },
  _repositionElements: function() {
   var scrollLeft = this._getScrollLeft(),
    scrollTop = this._getScrollTop(),
    horizontalOffset,
    verticalOffset,
    particle,
    fixedRatioOffset,
    background,
    bgLeft,
    bgTop,
    isVisibleVertical = true,
    isVisibleHorizontal = true,
    newPositionLeft,
    newPositionTop,
    newOffsetLeft,
    newOffsetTop,
    i;

   //First check that the scroll position or container size has changed
   if (this.currentScrollLeft === scrollLeft && this.currentScrollTop === scrollTop && this.currentWidth === this.viewportWidth && this.currentHeight === this.viewportHeight) {
    return;
   } else {
    this.currentScrollLeft = scrollLeft;
    this.currentScrollTop = scrollTop;
    this.currentWidth = this.viewportWidth;
    this.currentHeight = this.viewportHeight;
   }

   //Reposition elements
   for (i = this.particles.length - 1; i >= 0; i--) {
    particle = this.particles[i];

    fixedRatioOffset = particle.isFixed ? 1 : 0;

    //Calculate position, then calculate what the particle's new offset will be (for visibility check)
    if (this.options.horizontalScrolling) {
     newPositionLeft = (scrollLeft + particle.horizontalOffset + this.viewportOffsetLeft + particle.startingPositionLeft - particle.startingOffsetLeft + particle.parentOffsetLeft) * -(particle.stellarRatio + fixedRatioOffset - 1) + particle.startingPositionLeft;
     newOffsetLeft = newPositionLeft - particle.startingPositionLeft + particle.startingOffsetLeft;
    }
    if (this.options.verticalScrolling) {
     newPositionTop = (scrollTop + particle.verticalOffset + this.viewportOffsetTop + particle.startingPositionTop - particle.startingOffsetTop + particle.parentOffsetTop) * -(particle.stellarRatio + fixedRatioOffset - 1) + particle.startingPositionTop;
     newOffsetTop = newPositionTop - particle.startingPositionTop + particle.startingOffsetTop;
    }

    //Check visibility
    if (this.options.hideDistantElements) {
     isVisibleHorizontal = !this.options.horizontalScrolling || newOffsetLeft + particle.width > (particle.isFixed ? 0 : scrollLeft) && newOffsetLeft < (particle.isFixed ? 0 : scrollLeft) + this.viewportWidth + this.viewportOffsetLeft;
     isVisibleVertical = !this.options.verticalScrolling || newOffsetTop + particle.height > (particle.isFixed ? 0 : scrollTop) && newOffsetTop < (particle.isFixed ? 0 : scrollTop) + this.viewportHeight + this.viewportOffsetTop;
    }

    if (isVisibleHorizontal && isVisibleVertical) {
     if (particle.isHidden) {
      this.options.showElement(particle.$element);
      particle.isHidden = false;
     }

     if (this.options.horizontalScrolling) {
      this._setLeft(particle.$element, newPositionLeft, particle.startingPositionLeft);
     }

     if (this.options.verticalScrolling) {
      this._setTop(particle.$element, newPositionTop, particle.startingPositionTop);
     }
    } else {
     if (!particle.isHidden) {
      this.options.hideElement(particle.$element);
      particle.isHidden = true;
     }
    }
   }

   //Reposition backgrounds
   for (i = this.backgrounds.length - 1; i >= 0; i--) {
    background = this.backgrounds[i];

    fixedRatioOffset = background.isFixed ? 0 : 1;
    bgLeft = this.options.horizontalScrolling ? (scrollLeft + background.horizontalOffset - this.viewportOffsetLeft - background.startingOffsetLeft + background.parentOffsetLeft - background.startingBackgroundPositionLeft) * (fixedRatioOffset - background.stellarRatio) + 'px' : background.startingValueLeft;
    bgTop = this.options.verticalScrolling ? (scrollTop + background.verticalOffset - this.viewportOffsetTop - background.startingOffsetTop + background.parentOffsetTop - background.startingBackgroundPositionTop) * (fixedRatioOffset - background.stellarRatio) + 'px' : background.startingValueTop;

    setBackgroundPosition(background.$element, bgLeft, bgTop);
   }
  },
  _startViewportDetectionLoop: function() {
   var self = this,
    detect = function() {
     var viewportOffsets = self.$viewportElement.offset(),
      hasOffsets = viewportOffsets !== null && viewportOffsets !== undefined;

     self.viewportWidth = self.$viewportElement.width();
     self.viewportHeight = self.$viewportElement.height();

     self.viewportOffsetTop = hasOffsets ? viewportOffsets.top : 0;
     self.viewportOffsetLeft = hasOffsets ? viewportOffsets.left : 0;
    };

   detect();
   this._viewportDetectionInterval = setInterval(detect, this.options.viewportDetectionInterval);
  },
  _startAnimationLoop: function() {
   var self = this,
    requestAnimFrame = (function(){
     return window.requestAnimationFrame    ||
      window.webkitRequestAnimationFrame ||
      window.mozRequestAnimationFrame    ||
      window.oRequestAnimationFrame      ||
      window.msRequestAnimationFrame     ||
      function(callback, element){
       window.setTimeout(callback, 1000 / 60);
      };
    }());

   this._animationLoop = function(){
    requestAnimFrame(self._animationLoop);
    self._repositionElements();
   };
   this._animationLoop();
  }
 };

 $.fn[pluginName] = function (options) {
  var args = arguments;
  if (options === undefined || typeof options === 'object') {
   return this.each(function () {
    if (!$.data(this, 'plugin_' + pluginName)) {
     $.data(this, 'plugin_' + pluginName, new Plugin(this, options));
    }
   });
  } else if (typeof options === 'string' && options[0] !== '_' && options !== 'init') {
   return this.each(function () {
    var instance = $.data(this, 'plugin_' + pluginName);
    if (instance instanceof Plugin && typeof instance[options] === 'function') {
     instance[options].apply(instance, Array.prototype.slice.call(args, 1));
    }
    if (options === 'destroy') {
     $.data(this, 'plugin_' + pluginName, null);
    }
   });
  }
 };

 $[pluginName] = function(options) {
  var $window = $(window);
  return $window.stellar.apply($window, Array.prototype.slice.call(arguments, 0));
 };

 //Expose the scroll and position property function hashes so they can be extended
 $[pluginName].scrollProperty = scrollProperty;
 $[pluginName].positionProperty = positionProperty;

 //Expose the plugin class so it can be modified
 window.Stellar = Plugin;
}(jQuery, window, document));